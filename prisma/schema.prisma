// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


// ------------------ NEXTAUTH
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


enum Role {
  ADMIN
  CUSTOMER
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified  DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]


  // Database
  role          Role @default(CUSTOMER)
  orders        Order[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}


model Image {
  product_id      String
  src             String       @unique

  product         Product      @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
}

model Address {
  order_id        String       @unique
  name            String
  phone           String
  address_line    String?
  zip             String
  city            String
  country         String

  order         Order      @relation(fields: [order_id], references: [id], onDelete: Cascade)
}


model Product {
  id                String       @id @default(cuid())
  slug              String       @unique
  title             String
  image             String
  description       String       @db.LongText
  category          String?      
  price             Float        @default(0) @db.Float
  discount          Float        @default(0) 
  quantity          Int          @default(0) @db.Int
  is_new            Boolean      @default(false)
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
 
  
  images            Image[]
  orders            OrderProduct[]
  
}


  // sizes: [5, 6, 7, 8, 9],
  // color: "White",
    
 
 
model OrderProduct {
  id                String       @id @default(cuid())
  order_id          String
  product_id        String
  price             Float        @default(0) @db.Float
  discount          Float        @default(0) 
  quantity          Int          @default(1) @db.Int
  size              Int          @default(0) @db.Int
  
  
  product           Product         @relation(fields: [product_id], references: [id])
  order             Order           @relation(fields: [order_id], references: [id])

  @@index([product_id])
  @@index([order_id])
} 


model Order {
  id                String       @id @default(cuid())
  user_id           String
  products          OrderProduct[]
  address           Address?
  status            Status       @default(PENDING)
  payment_method    PaymentMethod @default(CASH)
  is_paid           PaymentStatus @default(UNPAID)
  // actual_amount     Float        @default(0) @db.Float
  // amount            Float        @default(0) @db.Float
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  user              User         @relation(fields: [user_id], references: [id])

  @@index([user_id])
}
enum Status {
  PENDING
  PROCESSING
  CANCELED
}


enum PaymentMethod {
  CASH
  PAYPAL
}
enum PaymentStatus {
  PAID
  UNPAID
}

// model Review {
//   id                  String    @id @default(cuid())
//   title               String
//   content             String
//   rating              Int
//   user_id             String
//   product_id          String
//   created_at          DateTime @default(now())
//   updated_at          DateTime @updatedAt
  
//   user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
//   product             Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
// }

